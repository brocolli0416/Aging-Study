}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
# Plot
ggplot(sum_OP, aes(x=Occurrence)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
rtdf$Position = as.factor(rtdf$Position)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
# Plot
ggplot(sum_OP, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
# Plot
ggplot(sum_OP, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position')
# Plot
ggplot(sum_OP, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue')
# Plot
ggplot(sum_OP, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=CI_1), color = 'blue')
rtdf$Position = as.factor(rtdf$Position)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
# Plot
ggplot(sum_OP, aes(x=Occurrence)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
rtdf$Position = as.factor(rtdf$Position)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
# Plot
ggplot(sum_OP, aes(x=Occurrence)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
rtdf$Position = as.factor(rtdf$Position)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
#positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
# Plot
ggplot(sum_OP, aes(x=Occurrence)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
str(sum_OP)
sum_PO = rtdf %>%
dplyr::group_by(Poition, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
sum_PO = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
str(sum_OP)
str(sum_PO)
rtdf$Occurrence = as.factor(rtdf$Occurrence)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
#positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
sum_PO = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
# Plot
ggplot(sum_PO, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
rtdf$Occurrence = as.factor(rtdf$Occurrence)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
#positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
sum_PO = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
str(PO)
rtdf$Occurrence = as.factor(rtdf$Occurrence)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
#positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
sum_PO = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
str(sum_PO)
# Plot
ggplot(sum_PO, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
rtdf$Occurrence = as.factor(rtdf$Occurrence)
rtdf$Position = as.numeric(rtdf$Position)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
sum_OP = rtdf %>%
dplyr::group_by(Occurrence, Position) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Position', values_from = c('mean', 'CI'))
#positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
sum_PO = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
str(sum_PO)
# Plot
ggplot(sum_PO, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
discrimination_reduced = lm(AgeinYrs ~ coded_Age, data = df)
summary(discrimination_reduced)
discrimination_reduced = lm(Recog ~ coded_Age, data = df)
summary(discrimination_reduced)
discrimination_reduced = lm(Diff ~ coded_Age, data = df)
summary(discrimination_reduced)
discrimination_reduced = lm(Disc ~ coded_Age, data = df)
summary(discrimination_reduced)
rtdf = read.csv("./YA_rawRT.csv")
rtdf$Occurrence = as.factor(rtdf$Occurrence)
rtdf$Position = as.numeric(rtdf$Position)
confidence_interval = function(x){ # Function that calculates the 95% confidence interval of distribution x
qnorm(.95) * (sd(x)/sqrt(length(x)))
}
# Summarize based on syllable position
#positions = c(sum_OP$mean_1, sum_OP$mean_2, sum_OP$mean_3)
sum_PO = rtdf %>%
dplyr::group_by(Position, Occurrence) %>%
dplyr::summarise(mean = mean(RT), CI = confidence_interval(RT)) %>%
pivot_wider(names_from = 'Occurrence', values_from = c('mean', 'CI'))
# Plot
ggplot(sum_PO, aes(x=Position)) +
#geom_bar(stat = "identity", fill = 'black', alpha = 0.5, width = 0.5) + #For bar graph
geom_line(aes(y=mean_1), color = 'blue') +
geom_line(aes(y=mean_2), color = 'green') +
geom_line(aes(y=mean_3), color = 'red') +
ylab('Mean RT (ms)') +
xlab('Syllable position') +
geom_errorbar(aes(ymin = mean_1-CI_1, ymax = mean_1+CI_1, width=0.05)) +
geom_errorbar(aes(ymin = mean_2-CI_2, ymax = mean_2+CI_2, width=0.05)) +
geom_errorbar(aes(ymin = mean_3-CI_3, ymax = mean_3+CI_3, width=0.05)) +
theme(axis.line = element_line(color = 'black'))
## Uncomment for a blank background
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
#OP_plot
#rtdf = rtdf %>%
#  filter(Subject != '60dc4b08dd9ec36f5ca9e3fa')
rtdf[, 'Coded_Position'] = as.factor(rtdf[, 'Position'])
rtdf[, 'Coded_Occurrence'] = as.factor(rtdf[, 'Occurrence'])
rtdf[, 'Coded_Condition'] = as.factor(rtdf[, 'Condition'])
rtdf[, 'Age'] = as.factor(rtdf[, 'Age'])
#rtdf = rtdf %>%
#  filter(Subject != '60dc4b08dd9ec36f5ca9e3fa')
rtdf[, 'Coded_Position'] = as.factor(rtdf[, 'Position'])
rtdf[, 'Coded_Occurrence'] = as.factor(rtdf[, 'Occurrence'])
rtdf[, 'Coded_Condition'] = as.factor(rtdf[, 'Condition'])
#rtdf[, 'Age'] = as.factor(rtdf[, 'Age'])
contrasts(rtdf$Coded_Position) = contr.treatment(3)
contrasts(rtdf$Coded_Occurrence) = contr.treatment(3)
contrasts(rtdf$Coded_Condition) = contr.treatment(3)
contrasts(rtdf$Age) = contr.treatment(2)
#rtdf = rtdf %>%
#  filter(Subject != '60dc4b08dd9ec36f5ca9e3fa')
rtdf[, 'Coded_Position'] = as.factor(rtdf[, 'Position'])
rtdf[, 'Coded_Occurrence'] = as.factor(rtdf[, 'Occurrence'])
rtdf[, 'Coded_Condition'] = as.factor(rtdf[, 'Condition'])
#rtdf[, 'Age'] = as.factor(rtdf[, 'Age'])
contrasts(rtdf$Coded_Position) = contr.treatment(3)
contrasts(rtdf$Coded_Occurrence) = contr.treatment(3)
contrasts(rtdf$Coded_Condition) = contr.treatment(3)
#contrasts(rtdf$Age) = contr.treatment(2)
position_full = lmer(RT ~ Coded_Position*Coded_Occurrence + Coded_Condition + (1 + Coded_Position| Subject), data = rtdf)
position_reduced = lmer(RT ~  Coded_Position + (1 + Coded_Position | Subject), data=rtdf)
summary(position_full)
summary(position_reduced)
#summ(positionEffect)
anova(position_full, position_reduced)
## Load data files
# Summary data for both tasks
df = read.csv("./Summary.csv", fileEncoding="UTF-8-BOM")
# Change here to change filtering criteria
df = df %>%
filter(Exclusion != 'exc') # remove the excluded participatns
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4) # For doing linear mixed modeling
library(jtools) # For looking at lmer outputs
library(lmerTest) # For looking at lmer outputs
## Load data files
# Summary data for both tasks
df = read.csv("./Summary.csv", fileEncoding="UTF-8-BOM")
# Data for individual reaction times
yadf = read.csv("./YA_rawRT.csv") %>%
filter(Subject != '5c97c01445658c0016752431'&
Subject != '60de5412b084f48d5d180a13'&
Subject != '60d754d900f33c946d172323'&
Subject != '60e228622e17c4ed597d92eb'&
Subject != '60214feec65df50cd6837a48'&
Subject != '5eb4841544c2df2f0190e8a0'&
Subject != '60cf8e9061eea6080907595a'&
Subject != '606192adc1fba49d7198df8f')
oadf = read.csv("./OA_rawRT.csv") %>%
filter(Subject != '5c5dadc66467ac0001b7fa53' &
Subject != '5f564265f9d134032e757250'&
Subject != '60a8bc1ed3a5087a7538ba3d'&
Subject != '5780d9a1900cc80001d2d1c2'&
Subject != '5a69d956111b250001e342b3'&
Subject != '5ea02e5c3fb6e6000a30693b'&
Subject != '5f607efeea3f070107273203'&
Subject != '5b100cb0a3553300017541c8'&
Subject != '5ea00e67848a4300085fa5cd'&
Subject != '5f6f7258aa7332501adb94f4'&
Subject != '60c0c4333e49151d768bb35b')
oadf = mutate(oadf, Age = 0 )
yadf = mutate(yadf, Age = 1)
rtdf = rbind(oadf, yadf)
rtdf$RT = as.numeric(rtdf$RT*1000)
# Change here to change filtering criteria
df = df %>%
filter(Exclusion != 'exc') # remove the excluded participatns
#filter(Exclusion != 'out') # uncomment when removing outliers
# Contrast code Age groups
df$Age = as.factor(df$Age)
df = mutate(df, coded_Age = Age)
contrasts(df$coded_Age) = contr.treatment(2)
## Load data files
# Summary data for both tasks
df = read.csv("./Summary.csv", fileEncoding="UTF-8-BOM")
# Change here to change filtering criteria
df = df %>%
filter(Exclusion != 'exc') # remove the excluded participatns
#filter(Exclusion != 'out') # uncomment when removing outliers
# Contrast code Age groups
df$Age = as.factor(df$Age)
df = mutate(df, coded_Age = Age)
contrasts(df$coded_Age) = contr.treatment(2)
df$Gender = as.factor(df$Gender)
df = mutate(df, coded_Gender = Gender)
contrasts(df$coded_Gender) = contr.treatment(2)
df$Counterbalance = as.factor(df$Counterbalance)
df = mutate(df, coded_Counterbalance = Counterbalance)
contrasts(df$coded_Counterbalance) = contr.treatment(2)
correl_df = select(df, Recog, Disc, Fam.Diff, AFC)
View(correl_df)
correl_res = cor(correl_df)
View(correl_res)
install.packages("Hmisc")
library(Hmisc)
correl_df = df %>%
mutate(RT.Diff = Diff) %>%
select(Recog, Disc, Fam.Diff, AFC, RT.Diff)
correl_res = cor(correl_df)
correl_res_p = rcorr(as.matrix(correl_res))
correl_res_p
correl_df = df %>%
mutate(RT.Diff = Diff) %>%
select(Recog, Disc, Fam.Diff, AFC, RT.Diff)
correl_res = cor(correl_df)
correl_res_p = rcorr(as.matrix(correl_res))
correl_df = df %>%
mutate(RT.Diff = Diff) %>%
select(Recog, Disc, Fam.Diff, AFC, RT.Diff)
correl_res = cor(correl_df)
correl_res_p = rcorr(as.matrix(correl_df))
correl_res_p
isc_recog = lm(Recog ~ Disc, data = df)
summary(disc_recog)
disc_recog = lm(Recog ~ Disc, data = df)
summary(disc_recog)
correl_df = df %>%
mutate(RT.Diff = Diff) %>%
select(Recog, Disc, Fam.Diff, AFC, RT.Diff)
correl_res = cor(correl_df)
correl_res_p = rcorr(as.matrix(correl_df))
correl_res_p
plot_disc = ggplot(df, aes(x = Age, y = Disc), narm = TRUE) +
geom_boxplot(fill='light gray') +
geom_point() +
ylab("Discrimination") +
xlab("") +
theme(axis.line = element_line(color = 'black')) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_recog = ggplot(df, aes(x = Age, y = Recog), narm = TRUE) +
geom_boxplot(fill='light gray') +
geom_point() +
ylab("Recognition") +
xlab("") +
theme(axis.line = element_line(color = 'black')) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_disc
plot_recog
ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
lines(predict(lm(Fam.Diff~Disc)),col='green')
ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
lines(predict(lm(Fam.Diff~Disc),data=df),col='green')
gplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot1 = ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot1
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot1 = ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot1
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot(plot1)
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot.new(plot1)
plot.new()
plot(plot1)
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot.new()
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot(plot1)
lines(df$Fam.Diff~df$Disc,col='green')
plot1 = ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot(plot1)
lines(df$Fam.Diff~df$Disc,col='green')
plot(df$Disc, df$Fam.Diff)
lines(df$Fam.Diff~df$Disc,col='green')
plot(df$Disc, df$Fam.Diff)
lines(predict(df$Fam.Diff~df$Disc),col='green')
plot(df$Disc, df$Fam.Diff)
lines(predict(lm(df$Fam.Diff~df$Disc)),col='green')
plot(df$Disc, df$Fam.Diff)
lines(predict(lm(df$Disc~df$Fam.Diff)),col='green')
plot(df$Disc, df$Fam.Diff)
lines(predict(lm(df$Disc~df$Fam.Diff)),col='black')
ggplot(df, aes(x=Disc, y=Fam.Diff)) +
geom_point() +
ylab("Familiarity rating (Word - Nonword)") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(df, aes(x=Disc, y=AFC)) +
geom_point() +
ylab("AFC Accuracy") +
xlab("Lure Discrimination") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
